{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sugeno Fuzzy Inference System\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import FuzzySystem as fs"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Inputs"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#INPUTS\n",
    "x11 = fs.FuzzySet('x11', fs.Trapmf([-1.5,-1.5,-1,1]))\n",
    "x12 = fs.FuzzySet('x12', fs.Trapmf([-1,1,1.5,1.5]))\n",
    "mf1 = fs.FuzzyVariable('MF1',[x11, x12], universe=[-1.5, 1.5])\n",
    "mf1.show()\n",
    "\n",
    "x21 = fs.FuzzySet('x21', fs.Trapmf([-1.5,-1.5,-1,1]))\n",
    "x22 = fs.FuzzySet('x22', fs.Trapmf([-1,1,1.5,1.5]))\n",
    "mf2 = fs.FuzzyVariable('MF2',[x21, x22], universe=[-1.5, 1.5])\n",
    "mf2.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Sugeno consequents"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [],
   "source": [
    "#OUTPUT\n",
    "output1 = fs.TSKConsequent(function='linear')\n",
    "\n",
    "def f1(x1, x2, c0, c1, c2): return c0+c1*x1+c2*x2\n",
    "output2 = fs.TSKConsequent(params=np.array([2,2.5,2.5]), function=f1)\n",
    "\n",
    "output3 = fs.TSKConsequent(params=8, function='constant')\n",
    "\n",
    "def f2(x1, x2, c0, c1, c2): return c0+c1*x1+c2*x2\n",
    "output4 = fs.TSKConsequent(params=np.array([4,4.5,3.5]), function=f2)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Rules"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [],
   "source": [
    "ant1  = fs.Antecedent(mf1['x11'] & mf2['x21'])\n",
    "rule1 = fs.FuzzyRule(ant1, output1)\n",
    "\n",
    "ant2  = fs.Antecedent(mf1['x11'] & mf2['x22'])\n",
    "rule2 = fs.FuzzyRule(ant2, output2)\n",
    "\n",
    "ant3  = fs.Antecedent(mf1['x12'] & mf2['x21'])\n",
    "rule3 = fs.FuzzyRule(ant3, output3)\n",
    "\n",
    "ant4  = fs.Antecedent(mf1['x12'] & mf2['x22'])\n",
    "rule4 = fs.FuzzyRule(ant4, output4)\n",
    "\n",
    "#Building the FIS\n",
    "\n",
    "fis = fs.FuzzyInferenceSystem([rule1, rule2, rule3, rule4], and_op='prod', or_op='sum')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### FIS Evaluation"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inputs:\n",
      "MF1: -1.5\n",
      "MF2: 1.5\n",
      " IF MF1 is x11 and MF2 is x21 THEN linear_function, fs = [0] with weight = 1.00\n",
      " IF MF1 is x11 and MF2 is x22 THEN f1, fs = [1] with weight = 1.00\n",
      " IF MF1 is x12 and MF2 is x21 THEN constant_function, fs = [0] with weight = 1.00\n",
      " IF MF1 is x12 and MF2 is x22 THEN f2, fs = [0] with weight = 1.00\n"
     ]
    },
    {
     "data": {
      "text/plain": "2.0"
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#FIS Evaluation\n",
    "\n",
    "inputs = ({'MF1':-1.5, 'MF2':1.5})\n",
    "result = fis.eval(inputs, verbose=True)\n",
    "fs.TSKDefuzzifier(result).eval()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inputs:\n",
      "MF1: [-1.5, -4]\n",
      "MF2: [1.5, 5]\n",
      " IF MF1 is x11 and MF2 is x21 THEN linear_function, fs = [[0 0]] with weight = 1.00\n",
      " IF MF1 is x11 and MF2 is x22 THEN f1, fs = [[1 1]] with weight = 1.00\n",
      " IF MF1 is x12 and MF2 is x21 THEN constant_function, fs = [[0 0]] with weight = 1.00\n",
      " IF MF1 is x12 and MF2 is x22 THEN f2, fs = [[0 0]] with weight = 1.00\n"
     ]
    },
    {
     "data": {
      "text/plain": "array([2. , 4.5])"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs = ({'MF1':[-1.5, -4], 'MF2':[1.5, 5]})\n",
    "result = fis.eval(inputs, verbose=True)\n",
    "fs.TSKDefuzzifier(result).eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}